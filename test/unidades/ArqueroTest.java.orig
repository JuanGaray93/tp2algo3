package unidades;

import com.company.excepciones.*;
import com.company.excepciones.Edificio.EdificioEnConstruccionException;
import com.company.excepciones.Edificio.EdificioNoDisponibleException;
import com.company.modelo.Jugador;
import com.company.modelo.edificios.Cuartel;
import com.company.modelo.terreno.Mapa;
import com.company.modelo.unidades.Aldeano;
import com.company.modelo.unidades.Arquero;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class ArqueroTest {

    Mapa mapa = Mapa.getMapa();
<<<<<<< HEAD
    Jugador jugador = null;
    Cuartel cuartel = null;
    Aldeano peon = null;
    Arquero arquero = null;
=======
    Jugador jugador = new Jugador();
    Arquero arquero = new Arquero(jugador);
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

    @Before
    public void resetMapa() {
        mapa.destruir();
        mapa = Mapa.getMapa();
        jugador = new Jugador();
        cuartel = new Cuartel(jugador);
        peon = new Aldeano(jugador);
        arquero = new Arquero(jugador);
    }
/*
    @Test
<<<<<<< HEAD
    public void testArqueroMoverHorizontalmenteHaciaDelante() throws
            Exception,
            ArmaMontadaException {

        arquero.establecerCoordenadasDeNacimiento(7,5);

        arquero.ubicar(7,5);
=======
    public void testArqueroMoverHorizontalmenteHaciaLaDerecha() throws
            Exception, EdificioEnConstruccionException, ArmaMontadaException, EdificioNoDisponibleException {

        arquero.establecerCoordenadasDeNacimiento(5,6);
        mapa.ubicar(arquero,5,6);
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

        assertTrue( mapa.estaOcupado(5, 6) );

        arquero.moverA(6, 6);

        assertTrue( mapa.estaOcupado(6, 6) );
    }

    @Test
<<<<<<< HEAD
    public void testArqueroMoverHorizontalmenteHaciaAtras()
            throws Exception, ArmaMontadaException {

        arquero.establecerCoordenadasDeNacimiento(5,5);

        arquero.ubicar(5,5);

        assertTrue(mapa.estaOcupado(5,5));

        arquero.moverA(5, 4);

        assertFalse(mapa.estaOcupado(5, 5));
=======
    public void testArqueroMoverHorizontalmenteHaciaLaIzquierda() throws Exception, EdificioEnConstruccionException, ArmaMontadaException, EdificioNoDisponibleException {

        arquero.establecerCoordenadasDeNacimiento(5,6);
        mapa.ubicar(arquero,5,6);

        assertTrue( mapa.estaOcupado(5, 6) );

        arquero.moverA(6, 6);
        arquero.moverA(5, 6);

        assertTrue( mapa.estaOcupado(5, 6) );
        assertFalse( mapa.estaOcupado(6, 6) );
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

    }

    @Test
<<<<<<< HEAD
    public void testArqueroMoverVerticalmenteHaciaArriba()
            throws Exception, ArmaMontadaException {

        arquero.establecerCoordenadasDeNacimiento(4,10);

        arquero.ubicar(4,10);
=======
    public void testArqueroMoverVerticalmenteHaciaArriba() throws Exception, EdificioEnConstruccionException, ArmaMontadaException, EdificioNoDisponibleException {

        arquero.establecerCoordenadasDeNacimiento(5,6);
        mapa.ubicar(arquero,5,6);
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

        assertTrue( mapa.estaOcupado(5, 6) );

        arquero.moverA(5, 7);

        assertTrue( mapa.estaOcupado(5, 7) );
        assertFalse( mapa.estaOcupado(5, 6) );
    }

    @Test
<<<<<<< HEAD
    public void testArqueroMoverVerticalmenteHaciaAbajo()
            throws Exception, ArmaMontadaException {


        arquero.establecerCoordenadasDeNacimiento(22,9);

        arquero.ubicar(22,9);
=======
    public void testArqueroMoverVerticalmenteHaciaAbajo() throws Exception, EdificioEnConstruccionException, ArmaMontadaException, EdificioNoDisponibleException {

        arquero.establecerCoordenadasDeNacimiento(5,6);
        mapa.ubicar(arquero,5,6);
        assertTrue( mapa.estaOcupado(5, 6) );

        arquero.moverA(5, 5);
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

        assertTrue( mapa.estaOcupado(5, 5) );
    }

    @Test
    public void testArqueroMoverEnDiagonalHaciaArribaALaIzquierda()
<<<<<<< HEAD
            throws Exception, ArmaMontadaException {


        arquero.establecerCoordenadasDeNacimiento(19,17);

        arquero.ubicar(19,17);

        assertTrue(mapa.estaOcupado(19, 17));

        arquero.moverA(18, 18);

        assertTrue(mapa.estaOcupado(18, 18));
=======
            throws Exception, EdificioEnConstruccionException, ArmaMontadaException, EdificioNoDisponibleException {

        arquero.establecerCoordenadasDeNacimiento(5,6);
        mapa.ubicar(arquero,5,6);

        assertTrue( mapa.estaOcupado(5, 6) );

        arquero.moverA(4, 7);
        assertTrue( mapa.estaOcupado(4, 7) );
        assertFalse( mapa.estaOcupado(5, 6) );
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23
    }

    @Test
    public void testArqueroMoverEnDiagonalHaciaArribaALaDerecha() throws Exception, EdificioEnConstruccionException, ArmaMontadaException, EdificioNoDisponibleException {

<<<<<<< HEAD
        arquero.establecerCoordenadasDeNacimiento(34,9);

        arquero.ubicar(34,9);
=======
        arquero.establecerCoordenadasDeNacimiento(5,6);
        mapa.ubicar(arquero,5,6);
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

        assertTrue( mapa.estaOcupado(5, 6) );

        arquero.moverA(5, 7);

        assertTrue( mapa.estaOcupado(5, 7) );
        assertFalse( mapa.estaOcupado(5, 6) );
    }

    @Test
<<<<<<< HEAD
    public void testArqueroMoverEnDiagonalHaciaAbajoALaIzquierda()
            throws Exception, ArmaMontadaException {

        arquero.establecerCoordenadasDeNacimiento(5,5);

        arquero.ubicar(5,5);
=======
    public void testArqueroMoverEnDiagonalHaciaAbajoALaIzquierda() throws Exception, EdificioEnConstruccionException, ArmaMontadaException, EdificioNoDisponibleException {

        arquero.establecerCoordenadasDeNacimiento(5,6);
        mapa.ubicar(arquero,5,6);

        assertTrue( mapa.estaOcupado(5, 6) );

        arquero.moverA(6, 6);
        arquero.moverA(5, 5);
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

        assertTrue( mapa.estaOcupado(5, 5) );
        assertFalse( mapa.estaOcupado(6, 6) );
    }

    @Test
    public void testArqueroMoverEnDiagonalHaciaAbajoALaDerecha()
            throws Exception, EdificioEnConstruccionException, ArmaMontadaException, EdificioNoDisponibleException {

<<<<<<< HEAD
        arquero.establecerCoordenadasDeNacimiento(4,2);

        arquero.ubicar(4,2);
=======
        arquero.establecerCoordenadasDeNacimiento(5,6);
        mapa.ubicar(arquero,5,6);

        assertTrue( mapa.estaOcupado(5, 6) );

        arquero.moverA(6, 5);

        assertTrue( mapa.estaOcupado(6, 5) );
    }

    @Test (expected = MovimientoInvalidoException.class)
    public void testArqueroHorizontalmenteALaIzquierdaACasilleroOcupado()
            throws Exception, EdificioEnConstruccionException, ArmaMontadaException, EdificioNoDisponibleException {

        arquero.establecerCoordenadasDeNacimiento(5,6);
        mapa.ubicar(arquero,5,6);
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

        Arquero arquero2 = new Arquero(jugador);
        arquero2.establecerCoordenadasDeNacimiento(4,6);
        mapa.ubicar(arquero2,4,6);

        assertTrue( mapa.estaOcupado(5, 6) );

        arquero.moverA(4, 6);

        assertTrue( mapa.estaOcupado(5, 6) );
    }

    @Test
    public void testArqueroAtacarAUnEdificioCercanoEnemigoConDistanciaIgualATres()
            throws Exception {

        cuartel.construir(peon, 2, 4);

        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();


<<<<<<< HEAD
        arquero.establecerCoordenadasDeNacimiento(1,5);
=======
        otroCuartel.construir(otroPeon, 7, 2);
        otroCuartel.avanzarConstruccion();
        otroCuartel.avanzarConstruccion();
        otroCuartel.avanzarConstruccion();
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

        arquero.ubicar(1,5);

        try {
            arquero.atacarA(cuartel);
        } catch (ArmaDesmontadaException ignored) { }

        assertEquals((Integer) 240, cuartel.getVida());

    }

    @Test
    public void testArqueroAtacarAUnaUnidadCercanaEnemigaConDistanciaIgualADos()
             {

        arquero.establecerCoordenadasDeNacimiento(2,1);

<<<<<<< HEAD
         try {
             arquero.ubicar(2,1);
         } catch (CasilleroNoExistenteException
                 | CasilleroLlenoException e) { }
=======
        cuartel.construir(peon, 3, 5);
        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

         Arquero otroArquero  =  new Arquero(jugador);

<<<<<<< HEAD
        otroArquero.establecerCoordenadasDeNacimiento(0,3);
=======
        otroCuartel.construir(otroPeon, 3, 3);
        otroCuartel.avanzarConstruccion();
        otroCuartel.avanzarConstruccion();
        otroCuartel.avanzarConstruccion();
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

        try {
            otroArquero.ubicar(0,3);
        } catch (CasilleroNoExistenteException
                | CasilleroLlenoException e) { }

        try {
            arquero.atacarA(otroArquero);
        } catch (EnemigoInvalidoException | ArmaDesmontadaException e) { }

        assertEquals((Integer) 60, otroArquero.getVida());

    }

<<<<<<< HEAD
    @Test
    public void testArqueroAtacarAUnaUnidadEnemigaConDistanciaIgualAUno()
            throws Exception {
=======
    @Test(expected = EnemigoInvalidoException.class)
    public void testArqueroAtacarAUnaUnidadAmigaConDistanciaIgualAUno()
            throws Exception, EdificioNoDisponibleException, ArmaDesmontadaException {

        Cuartel cuartel = new Cuartel(jugador);
        Aldeano peon = new Aldeano(jugador);
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

        cuartel.construir(peon, 32, 9);

        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();

        arquero.establecerCoordenadasDeNacimiento(32,8);

        arquero.ubicar(32,8);

        try {
            arquero.atacarA(cuartel);
        } catch (ArmaDesmontadaException ignored) { }

        assertEquals((Integer) 240, cuartel.getVida());
    }
*/
    @Test
    public void testArqueroAtacarADosPosicionablesEnemigosConDistanciasDistintas() throws Exception, ArmaDesmontadaException {

        Arquero otroArquero =  new Arquero(jugador);

<<<<<<< HEAD
        otroArquero.establecerCoordenadasDeNacimiento(5,5);
        otroArquero.ubicar(5,5);
=======
        cuartel.construir(peon, 32, 9);
        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23

        arquero.establecerCoordenadasDeNacimiento(5,4);
        arquero.ubicar(5,4);

<<<<<<< HEAD
        cuartel.construir(peon,8,5);
=======
        otroCuartel.construir(otroPeon, 32, 7);
        otroCuartel.avanzarConstruccion();
        otroCuartel.avanzarConstruccion();
        otroCuartel.avanzarConstruccion();
>>>>>>> 969c90a9dda6186e07f0f11e981377a586b86c23


        cuartel.avanzarConstruccion();

        cuartel.avanzarConstruccion();

        cuartel.avanzarConstruccion();
        System.out.println(arquero.getVida());
        arquero.atacarA(otroArquero);

        assertEquals((Integer) 60, otroArquero.getVida());
        assertEquals((Integer) 240, cuartel.getVida());
    }
/*
    @Test(expected = EnemigoInvalidoException.class)
    public void testArqueroAtacarAUnEdificioEnemigoFueraDeSuRangoDeAtaque()
            throws Exception, EdificioNoDisponibleException, ArmaDesmontadaException {

        Jugador jugador = new Jugador();
        Jugador otroJugador = new Jugador();
        Cuartel cuartel = new Cuartel(jugador);
        Cuartel otroCuartel = new Cuartel(otroJugador);
        Aldeano peon = new Aldeano(jugador);
        Aldeano otroPeon = new Aldeano(otroJugador);
        Arquero arquero = new Arquero(jugador);

        cuartel.construir(peon, 2, 10);
        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();
        cuartel.avanzarConstruccion();

        cuartel.crear(arquero);

        otroCuartel.construir(otroPeon, 0, 0);
        otroCuartel.avanzarConstruccion();
        otroCuartel.avanzarConstruccion();
        otroCuartel.avanzarConstruccion();

        arquero.atacarA(otroCuartel);

        assertEquals((Integer) 250, otroCuartel.getVida());
    }
*/
}
